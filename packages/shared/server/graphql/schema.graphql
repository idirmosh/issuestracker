### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  content: String
  createdAt: DateTime!
  id: String
  issueId: String
  user: User!
  userId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File {
  size: Int
  type: String
  url: String
}

type Issue {
  comments: [Comment]
  createdAt: DateTime!
  description: String
  id: String
  project: Project
  projectName: String
  severity: Severity
  slug: String
  status: Status
  title: String
  updatedAt: DateTime!
  user: User
  userId: String
  votes: Int
}

type Mutation {
  createComment(content: String!, issueId: String!): Comment!
  createIssue(description: String!, projectId: String!, projectSlug: String!, severity: String!, title: String!): Issue!
  createProject(description: String!, email: String!, image: String!, name: String!, url: String!): Project!
  deleteComment(commentId: String!): Comment!
  editComment(commentData: String!, commentId: String!): Comment!
  logOut: User!
  login(password: String!, username: String!): User!
  signUp(email: String!, password: String!, username: String!): User!
  updateVote(issueId: String!): Issue!
  uploadImage(name: String!, type: String!): File!
}

type Project {
  createdAt: DateTime!
  description: String
  email: String
  id: String
  image: String
  issues: [Issue]
  name: String
  slug: String
  url: String
  user: User
  userId: String
}

type Query {
  getAllProjects: [Project]!
  getComments(issueId: String!): [Comment]!
  getDashboard: [Project]!
  getIssue(slug: String!): Issue!
  getLatestIssues: [Issue]!
  getMe: User!
  getProject(slug: String!): Project!
  getProjects: [Project]!
  getTrendingIssues: [Issue]!
}

enum Severity {
  CRITICAL
  HIGH
  LOW
  MEDIUM
}

enum Status {
  CLOSED
  DUBLICATE
  OPEN
  REVIEWING
}

type User {
  comments: [Comment]
  createdAt: DateTime!
  email: String
  id: String
  image: String
  issues: [Issue]
  projects: [Project]
  username: String
}